name: Build Project
on:
  workflow_call:
jobs:
  check-event:
    name: Event Data
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    outputs:
      package: ${{ steps.setup.outputs.package }}
      codesign: ${{ steps.setup.outputs.codesign }}
      notarize: ${{ steps.setup.outputs.notarize }}
      config: ${{ steps.setup.outputs.config }}
      commitHash: ${{ steps.setup.outputs.commitHash }}
      isUpstreamRelease: ${{ steps.setup.outputs.isUpstreamRelease }}
      upstreamVersion: ${{ steps.setup.outputs.upstreamVersion }}
      nadVersion: ${{ steps.setup.outputs.nadVersion }}
      versionPayload: ${{ steps.setup.outputs.versionPayload }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check Event Data
        id: setup
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          if [[ "${RUNNER_DEBUG:-}" ]]; then set -x; fi

          emit_output() {
            printf '%s=%s\n' "$1" "$2" >> "$GITHUB_OUTPUT"
          }

          set_flag() {
            local key=$1 value=$2
            for idx in "${!config_data[@]}"; do
              if [[ "${config_data[$idx]}" == "${key}:"* ]]; then
                config_data[$idx]="${key}:${value}"
                return
              fi
            done
            config_data+=("${key}:${value}")
          }

          mapping_file="${GITHUB_WORKSPACE}/version-mapping.json"
          default_nad_version="0.0.0-no-aja"
          if [[ -r "${mapping_file}" ]]; then
            extracted=$(jq -re '
              [
                .last_sync.nad_version,
                (.version_mappings // {} | to_entries | sort_by(.key) | reverse | (.[0].value // empty))
              ]
              | map(select(. != null and . != ""))
              | (.[0] // empty)
            ' "${mapping_file}" 2>/dev/null || true)
            if [[ -n "${extracted}" ]]; then
              default_nad_version="${extracted}"
            fi
          fi
          default_upstream_version="${default_nad_version%-no-aja}"

          is_upstream_release=false
          upstream_version=""
          nad_version=""

          config_data=('codesign:false' 'notarize:false' 'package:false' 'config:RelWithDebInfo')

          case "${GITHUB_EVENT_NAME}" in
            pull_request)
              if gh pr view "${{ github.event.number }}" --json labels \
                | jq -e -r '.labels[] | select(.name == "Seeking Testers")' > /dev/null; then
                set_flag codesign true
                set_flag package true
              fi
              ;;
            push)
              set_flag codesign true
              set_flag package true

              latest_author=$(git log -1 --pretty='%an <%ae>')
              latest_message=$(git log -1 --pretty='%B')
              if [[ "${latest_author}" == OBS\ NAD\ Sync\ Bot* ]] && grep -q "Upstream version:" <<< "${latest_message}"; then
                upstream_version=$(grep -Eo 'Upstream version:[[:space:]]*[^[:space:]]+' <<< "${latest_message}" | sed -E 's/Upstream version:[[:space:]]*//' | head -1)
                if [[ -n "${upstream_version}" ]]; then
                  is_upstream_release=true
                  nad_version="${upstream_version}-no-aja"
                  echo "Detected upstream sync commit for ${upstream_version}"
                fi
              elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
                tag_name="${GITHUB_REF_NAME}"
                base_tag="${tag_name#v}"
                suffix=""
                if [[ "${base_tag}" == *"-no-aja" ]]; then
                  suffix="-no-aja"
                  base_tag="${base_tag%-no-aja}"
                fi
                if [[ "${base_tag}" =~ ^[0-9]+(\.[0-9]+){1,2}(-(rc|beta).+)?$ ]]; then
                  is_upstream_release=true
                  upstream_version="${base_tag}"
                  if [[ -n "${suffix}" ]]; then
                    nad_version="${base_tag}${suffix}"
                  else
                    nad_version="${base_tag}-no-aja"
                  fi
                  set_flag notarize true
                  echo "Detected tag release: ${nad_version}"
                fi
              fi
              ;;
            workflow_dispatch)
              manual_version="${{ github.event.inputs.version || '' }}"
              set_flag codesign true
              if [[ -n "${manual_version}" ]]; then
                upstream_version="${manual_version#v}"
                nad_version="${upstream_version}-no-aja"
                set_flag package true
                echo "Manual sync with version: ${nad_version}"
              fi
              ;;
            repository_dispatch)
              set_flag codesign true
              set_flag package true
              payload_version="${{ github.event.client_payload.version || '' }}"
              payload_nad="${{ github.event.client_payload.nad_version || '' }}"
              payload_release="${{ github.event.client_payload.is_upstream_release || 'false' }}"
              if [[ -n "${payload_version}" ]]; then
                upstream_version="${payload_version#v}"
              fi
              if [[ -n "${payload_nad}" ]]; then
                nad_version="${payload_nad}"
              elif [[ -n "${upstream_version}" ]]; then
                nad_version="${upstream_version}-no-aja"
              fi
              if [[ "${payload_release}" == "true" ]]; then
                is_upstream_release=true
                set_flag notarize true
              fi
              ;;
            schedule)
              set_flag codesign true
              set_flag package true
              ;;
            *)
              ;;
          esac

          if [[ -z "${nad_version}" ]]; then
            nad_version="${default_nad_version}"
          fi
          if [[ -z "${upstream_version}" ]]; then
            upstream_version="${default_upstream_version}"
          fi

          emit_output isUpstreamRelease "${is_upstream_release}"
          emit_output upstreamVersion "${upstream_version}"
          emit_output nadVersion "${nad_version}"

          for config in "${config_data[@]}"; do
            IFS=':' read -r key value <<< "${config}"
            emit_output "${key}" "${value}"
          done
          emit_output commitHash "${GITHUB_SHA:0:9}"

          emit_output versionPayload "$(jq -nc --arg upstream "${upstream_version}" --arg nad "${nad_version}" --arg release "${is_upstream_release}" '{upstreamVersion:$upstream,nadVersion:$nad,isUpstreamRelease:($release=="true")}')"

  macos-build:
    name: macOS
    runs-on: macos-15
    needs: check-event
    # NAD: 始终构建 macOS，包括标签推送时
    strategy:
      fail-fast: false
      matrix:
        target: [arm64, x86_64]
    defaults:
      run:
        shell: zsh --no-rcs --errexit --pipefail {0}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set Up Environment
        id: setup
        run: |
          : Set Up Environment
          if (( ${+RUNNER_DEBUG} )) setopt XTRACE

          print '::group::Enable Xcode 16.4'
          sudo xcode-select --switch /Applications/Xcode_16.4.app/Contents/Developer
          print '::endgroup::'

          print '::group::Clean Homebrew Environment'
          local -a unwanted_formulas=()
          local -a remove_formulas=()
          for formula (${unwanted_formulas}) {
            if [[ -d ${HOMEBREW_PREFIX}/Cellar/${formula} ]] remove_formulas+=(${formula})
          }

          if (( #remove_formulas )) brew uninstall --ignore-dependencies ${remove_formulas}
          print '::endgroup::'

          local -A arch_names=(x86_64 intel arm64 apple)
          print "cpuName=${arch_names[${{ matrix.target }}]}" >> $GITHUB_OUTPUT

      - uses: actions/cache/restore@v4
        id: ccache-cache
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.target }}-${{ needs.check-event.outputs.config }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.target }}-

      # NAD: 跳过代码签名设置（无证书）
      # - name: Set Up Code Signing 🔑
      #   uses: ./.github/actions/setup-macos-codesigning
      #   if: false
      #   id: codesign

      - name: Build OBS Studio
        uses: ./.github/actions/build-obs
        env:
          TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_HASH: ${{ secrets.TWITCH_HASH }}
          RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}
          RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}
          YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}
          YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}
          YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}
          YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}
        with:
          target: ${{ matrix.target }}
          config: ${{ needs.check-event.outputs.config }}
          # NAD: 直接禁用签名（无证书）
          codesign: false
          codesignIdent: '-'
          codesignTeam: ''
          provisioningProfileUUID: ''
          version: ${{ needs.check-event.outputs.nadVersion }}

      - name: Package OBS Studio
        uses: ./.github/actions/package-obs
        with:
          target: ${{ matrix.target }}
          config: ${{ needs.check-event.outputs.config }}
          package: ${{ fromJSON(needs.check-event.outputs.package) }}
          # NAD: 直接禁用签名和公证（无证书）
          codesign: false
          codesignIdent: '-'
          notarize: false
          codesignUser: ''
          codesignPass: ''

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: obs-studio-macos-${{ matrix.target }}-${{ needs.check-event.outputs.commitHash }}
          path: ${{ github.workspace }}/build_macos/obs-studio-*-macos-${{ steps.setup.outputs.cpuName }}.*

      - name: Upload Debug Symbol Artifacts
        uses: actions/upload-artifact@v4
        if: ${{ needs.check-event.outputs.config == 'Release' }}
        with:
          name: obs-studio-macos-${{ matrix.target }}-${{ needs.check-event.outputs.commitHash }}-dSYMs
          path: ${{ github.workspace }}/build_macos/obs-studio-*-macos-${{ steps.setup.outputs.cpuName }}-dSYMs.tar.xz

      - uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.ccache-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.target }}-${{ needs.check-event.outputs.config }}

  ubuntu-build:
    name: Ubuntu
    runs-on: ubuntu-24.04
    needs: check-event
    if: false  # 禁用 Linux 构建
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/cache/restore@v4
        id: ccache-cache
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-${{ matrix.os }}-ccache-x86_64-${{ needs.check-event.outputs.config }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-ccache-x86_64-

      - name: Build OBS Studio
        uses: ./.github/actions/build-obs
        env:
          TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_HASH: ${{ secrets.TWITCH_HASH }}
          RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}
          RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}
          YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}
          YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}
          YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}
          YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}
        with:
          target: x86_64
          config: ${{ needs.check-event.outputs.config }}

      - name: Package OBS Studio
        uses: ./.github/actions/package-obs
        with:
          target: x86_64
          config: ${{ needs.check-event.outputs.config }}
          package: ${{ fromJSON(needs.check-event.outputs.package) }}

      - name: Upload Source Tarball
        uses: actions/upload-artifact@v4
        with:
          name: obs-studio-${{ matrix.os }}-sources-${{ needs.check-event.outputs.commitHash }}
          path: ${{ github.workspace }}/build_ubuntu/obs-studio-*-sources.*

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: obs-studio-${{ matrix.os }}-x86_64-${{ needs.check-event.outputs.commitHash }}
          path: ${{ github.workspace }}/build_ubuntu/obs-studio-*-x86_64-ubuntu-gnu.*

      - name: Upload Debug Symbol Artifacts
        uses: actions/upload-artifact@v4
        if: ${{ fromJSON(needs.check-event.outputs.package) }}
        with:
          name: obs-studio-${{ matrix.os }}-x86_64-${{ needs.check-event.outputs.commitHash }}-dbgsym
          path: ${{ github.workspace }}/build_ubuntu/obs-studio-*-x86_64-ubuntu-gnu-dbgsym.ddeb

      - uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.ccache-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-${{ matrix.os }}-ccache-x86_64-${{ needs.check-event.outputs.config }}

  flatpak-build:
    name: Flatpak
    runs-on: ubuntu-24.04
    needs: check-event
    if: false  # 禁用 Flatpak 构建
    defaults:
      run:
        shell: bash
    env:
      FLATPAK_BUILD_SHARE_PATH: flatpak_app/files/share
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:kde-6.8
      options: --privileged
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          set-safe-directory: ${{ env.GITHUB_WORKSPACE }}

      - name: Set Up Environment
        id: setup
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          : Set Up Environment
          if [[ "${RUNNER_DEBUG}" ]]; then set -x; fi

          git config --global --add safe.directory "${GITHUB_WORKSPACE}"

          cache_key='flatpak-builder-${{ hashFiles('build-aux/**/*.json') }}'
          cache_ref='master'
          read -r id key size unit created accessed <<< \
            "$(gh cache list --ref "refs/heads/${cache_ref}" --key "${cache_key}-x86_64" | head -1)"

          if [[ "${key}" ]]; then
            echo "cacheHit=true" >> $GITHUB_OUTPUT
          else
            echo "cacheHit=false" >> $GITHUB_OUTPUT
          fi

          echo "cacheKey=${cache_key}" >> $GITHUB_OUTPUT

      - name: Validate Flatpak manifest
        uses: ./.github/actions/flatpak-builder-lint
        with:
          artifact: manifest
          path: build-aux/com.obsproject.Studio.json

      - name: Build Flatpak Manifest
        uses: flatpak/flatpak-github-actions/flatpak-builder@b8a638469ea7ec62844d7b6e487b697e6f249576
        with:
          build-bundle: ${{ fromJSON(needs.check-event.outputs.package) }}
          bundle: obs-studio-flatpak-${{ needs.check-event.outputs.commitHash }}.flatpak
          manifest-path: ${{ github.workspace }}/build-aux/com.obsproject.Studio.json
          cache: ${{ fromJSON(steps.setup.outputs.cacheHit) || (github.event_name == 'push' && github.ref_name == 'master')}}
          restore-cache: ${{ fromJSON(steps.setup.outputs.cacheHit) }}
          cache-key: ${{ steps.setup.outputs.cacheKey }}
          mirror-screenshots-url: https://dl.flathub.org/media

      - name: Validate AppStream
        uses: ./.github/actions/flatpak-builder-lint
        with:
          artifact: appstream
          path: ${{ env.FLATPAK_BUILD_SHARE_PATH }}/metainfo/com.obsproject.Studio.metainfo.xml

      - name: Verify Icon and Metadata in app-info
        working-directory: ${{ env.FLATPAK_BUILD_SHARE_PATH }}
        run: |
          : Verify Icon and Metadata in app-info
          test -f app-info/icons/flatpak/128x128/com.obsproject.Studio.png || { echo "::error::Missing 128x128 icon in app-info"; exit 1; }
          test -f app-info/xmls/com.obsproject.Studio.xml.gz || { echo "::error::Missing com.obsproject.Studio.xml.gz in app-info"; exit 1; }

      - name: Validate build directory
        uses: ./.github/actions/flatpak-builder-lint
        with:
          artifact: builddir
          path: flatpak_app

      - name: Validate repository
        uses: ./.github/actions/flatpak-builder-lint
        with:
          artifact: repo
          path: repo

  windows-build:
    name: Windows
    runs-on: windows-2022
    needs: check-event
    if: false  # 禁用 Windows 构建
    strategy:
      matrix:
        architecture: [x64, arm64]
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Build OBS Studio
        uses: ./.github/actions/build-obs
        env:
          TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_HASH: ${{ secrets.TWITCH_HASH }}
          RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}
          RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}
          YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}
          YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}
          YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}
          YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}
          GPU_PRIORITY_VAL: ${{ secrets.GPU_PRIORITY_VAL }}
        with:
          target: ${{ matrix.architecture }}
          config: ${{ needs.check-event.outputs.config }}

      - name: Package OBS Studio
        uses: ./.github/actions/package-obs
        with:
          target: ${{ matrix.architecture }}
          config: ${{ needs.check-event.outputs.config }}
          package: ${{ fromJSON(needs.check-event.outputs.package) }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: obs-studio-windows-${{ matrix.architecture }}-${{ needs.check-event.outputs.commitHash }}
          path: ${{ github.workspace }}/build_${{ matrix.architecture }}/obs-studio-*-windows-${{ matrix.architecture }}.zip
